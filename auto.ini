
; This is probably an odd choice to try fully-managed mode out on, as we have
; a subpackage to deal with, but...  Why not :)

[common]
; Set to 0 to DISABLE all description/prep/build/etc management.
is_fully_managed=1

[add_build_requires]
; optional test #1 (in no particular order)
; ** moved to author tests
;perl(Test::Pod)=0
;perl(Test::Pod::Coverage)=0
perl(DBM::Deep)=0.983
perl(DateTime::Format::MySQL)=0
; optional test #3
perl(HTTP::Headers)=0
perl(Params::Coerce)=0
perl(URI)=0
perl(Try::Tiny)=0.02
; optional test #4
; commented out as Locale::US's license is ambiguous at the moment, precluding
; packaging it.
;perl(Regexp::Common)=0
;perl(Locale::US)=0
; optional test #5
perl(IO::File)=0
perl(IO::String)=0
; optional test #6
perl(Test::Deep)=0
; optional test #7
perl(Declare::Constraints::Simple)=0
; optional test #8 (as of 0.20)
perl(Module::Refresh)=0
; optional tests #9 (as of 0.57)
perl(Test::Warn)=0
perl(Test::Output)=0
; optional test #10
perl(DateTime::Calendar::Mayan)=0

[spec_description]
content= <<EOT
Moose is an extension of the Perl 5 object system.

Moose is built on top of Class::MOP, which is a metaclass system for
Perl 5. This means that Moose not only makes building normal Perl 5
objects better, but it also provides the power of metaclass programming.
such things.  Moose is different from other Perl 5 object systems because
it is not a new system, but instead an extension of the existing one.

While Moose is very much inspired by Perl 6, it is not itself Perl
6.  Instead, it is an OO system for Perl 5. I built Moose because I was
tired or writing the same old boring Perl 5 OO code, and drooling over
Perl 6 OO. So instead of switching to Ruby, I wrote Moose :)

%package -n perl-Test-Moose
License:    GPL+ or Artistic
Group:      Development/Libraries
Summary:    Test functions for Moose specific features
Requires:   %{name} = %{version}-%{release}

%description -n perl-Test-Moose
This module provides some useful test functions for Moose based classes.
It is an experimental first release, so comments and suggestions are
very welcome.

EOT

[spec_prep]
setup_line=%setup -q -n Moose-%{version}
use_custom_prep=1
custom_prep= <<EOT

# tidy things up...
find t/ -type f -exec perl -pi -e 's|^#!/usr/local/bin|#!/usr/bin|' {} +
find . -name '*.orig' -exec rm -v {} +
find . -type f -exec chmod -c -x {} +

EOT

;[spec_build]
; Set to 0 or delete section to use the default
;use_custom=1
;custom= <<EOT
;%{__perl} Makefile.PL INSTALLDIRS=vendor
;make %{?_smp_mflags}
;
;
;EOT

;[spec_install]
; Set to 0 or delete section to use the default
;use_custom=1
;custom= <<EOT
;rm -rf %{buildroot}
;
;make pure_install DESTDIR=%{buildroot}
;find %{buildroot} -type f -name .packlist -exec rm -f {} +
;find %{buildroot} -depth -type d -exec rmdir {} 2>/dev/null \;
;
;%{_fixperms} %{buildroot}/*
;
;EOT

;[spec_check]
; Set to 0 or delete section to use the default
;use_custom=1
;custom= <<EOT
;make test
;
;EOT

;[spec_clean]
;; Set to 0 or delete section to use the default
;use_custom=1
;custom= <<EOT
;rm -rf %{buildroot}
;
;EOT

[spec_files]
; Set to 0 or delete section to use the default
use_custom=1
custom= <<EOT
%defattr(-,root,root,-)
%doc Changes README doap.rdf
%{perl_vendorarch}/*
%exclude %dir %{perl_vendorarch}/auto/
%exclude %{perl_vendorarch}/Test
%{_mandir}/man3/*
%exclude %{_mandir}/man3/Test::Moose*

%files -n perl-Test-Moose
%defattr(-,root,root,-)
%{perl_vendorarch}/Test
%{_mandir}/man3/Test::Moose*

EOT

